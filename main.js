/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DSAPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/view/DSAView.ts
var import_obsidian2 = require("obsidian");
var import_child_process = require("child_process");

// src/modal/CreateHeroModal.ts
var import_obsidian = require("obsidian");

// src/data/HeroData.ts
var HeroData = class {
  constructor(id, name) {
    this.id = id;
    this.name = name;
  }
  toHeroData() {
    return new HeroData(this.id, this.name);
  }
};

// src/modal/CreateHeroModal.ts
var HeroCreationData = class extends HeroData {
  constructor(id, name, dataSheet) {
    super(id, name);
    this.dataSheet = dataSheet;
  }
};
var CreateHeroModal = class extends import_obsidian.Modal {
  constructor(plugin, onSubmit) {
    super(plugin.app);
    this.setTitle("DSA - Neuer Held");
    let id = "";
    let name = "";
    let jsonData = {};
    new import_obsidian.Setting(this.contentEl).setName("Ordnername").addText((text) => text.onChange((value) => {
      id = value;
    }));
    new import_obsidian.Setting(this.contentEl).setName("Anzeigename").addText((text) => text.onChange((value) => {
      name = value;
    }));
    new import_obsidian.Setting(this.contentEl).setName("Optolith Json Datei").addButton((button) => {
      button.setButtonText("Choose File").onClick(() => {
        const fileInput = document.createElement("input");
        fileInput.type = "file";
        fileInput.accept = ".json";
        fileInput.style.display = "none";
        fileInput.addEventListener("change", async (event) => {
          const target = event.target;
          if (!target.files || !target.files.length)
            return;
          const file = target.files[0];
          const fileText = await file.text();
          try {
            JSON.parse(fileText);
            new import_obsidian.Notice("File uploaded successfully!");
            jsonData = fileText;
          } catch (error) {
            new import_obsidian.Notice("Invalid JSON file");
          }
        });
        fileInput.click();
      });
    });
    new import_obsidian.Setting(this.contentEl).addButton((btn) => btn.setButtonText("Erstellen").setCta().onClick(() => {
      this.close();
      onSubmit(new HeroCreationData(id, name, jsonData));
    }));
  }
};

// src/view/DSAView.ts
var DSAView = class extends import_obsidian2.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getDisplayText() {
    return "DSA - ";
  }
  getIcon() {
    return "dice";
  }
  onOpen() {
    this.containerEl.empty();
    this.containerEl.addClass("dsa-view");
    const header = this.containerEl.createDiv({ cls: "dsa-header" });
    const banner = header.createDiv({ cls: "dsa-banner" });
    const navigationBox = header.createDiv({ cls: "dsa-navigation-box" });
    const navigation = navigationBox.createEl("ul");
    navigation.createEl("li").createEl("button", { text: "Heldenliste" }).onclick = () => {
      this.plugin.viewOpener.openHeroListView();
    };
    navigation.createEl("li").createEl("button", { text: "Neuer Held" }).onclick = () => {
      new CreateHeroModal(this.plugin, (result) => {
        if (!result.name || !result.id) {
          new import_obsidian2.Notice("Bitte Name und ID f\xFCr den Held angeben");
          return;
        }
        if (this.plugin.heroManager.getHeroData(result.id)) {
          new import_obsidian2.Notice("Ordnername bereits vergeben");
          return;
        }
        this.plugin.heroManager.createHero(result.toHeroData());
        this.plugin.heroManager.pushNewDataSheet(result.id, result.dataSheet).then((r) => {
          this.plugin.viewOpener.openHeroOverview(result.id);
        });
      }).open();
    };
    navigation.createEl("li").createEl("button", { text: "Optolith" }).onclick = () => {
      this.openOptolith();
    };
    navigation.createEl("li").createEl("button", { text: "Tokenizer" }).onclick = () => {
      this.plugin.viewOpener.openTokenizerView();
    };
    header.createEl("h1", { text: this.getTitle(), cls: "dsa-view-title" });
    header.createEl("hr");
    return super.onOpen();
  }
  createContentElement(clazz = "") {
    return this.containerEl.createDiv({ cls: `dsa-content ${clazz}` });
  }
  openOptolith() {
    let optolithPath = this.plugin.settings.optolithPath;
    if (!optolithPath) {
      new import_obsidian2.Notice("Bitte den Pfad zu Optolith in den Einstellungen festlegen");
      return;
    }
    if (!optolithPath.startsWith('"') && !optolithPath.endsWith('"')) {
      optolithPath = `"${optolithPath}"`;
    }
    if (this.isProgramRunning(optolithPath)) {
      new import_obsidian2.Notice("Optolith l\xE4uft bereits.");
      this.focusExistingProgram(optolithPath);
    } else {
      (0, import_child_process.exec)(optolithPath, (error, stdout, stderr) => {
        if (error) {
          new import_obsidian2.Notice(`Fehler beim \xD6ffnen von Optolith: ${error.message}`);
          return;
        }
      });
    }
  }
  isProgramRunning(programPath) {
    const programName = this.getExecutableName(programPath);
    let command;
    if (process.platform === "win32") {
      command = `tasklist | findstr /i ${programName}`;
    } else if (process.platform === "darwin") {
      command = `pgrep -f ${programName}`;
    } else {
      command = `pgrep -f ${programName}`;
    }
    try {
      const result = (0, import_child_process.execSync)(command, { stdio: "pipe" });
      return result.length > 0;
    } catch (e) {
      return false;
    }
  }
  focusExistingProgram(programPath) {
    const programName = this.getExecutableName(programPath).replace(".exe", "").replace('"', "");
  }
  // Function to extract the executable name from the program path
  getExecutableName(programPath) {
    const parts = programPath.split(/[/\\]/);
    return parts[parts.length - 1];
  }
};

// src/view/HeroListView.ts
var VIEW_HERO_LIST = "hero-list";
var HeroListView = class extends DSAView {
  constructor(leaf, plugin) {
    super(leaf, plugin);
    this.registerEvent(this.app.workspace.on("active-leaf-change", (leaf2) => {
      if (leaf2.view instanceof HeroListView) {
        this.onOpen();
      }
    }));
  }
  getViewType() {
    return VIEW_HERO_LIST;
  }
  getDisplayText() {
    return `${super.getDisplayText()}Heldenliste`;
  }
  getTitle() {
    return "Deine Helden";
  }
  async onOpen() {
    await super.onOpen();
    const listContainer = this.createContentElement(VIEW_HERO_LIST);
    const { heroManager } = this.plugin;
    heroManager.validateHeroData();
    const heroes = heroManager.getHeroes();
    const heroList = listContainer.createDiv();
    heroList.addClass("dsa-hero-list");
    for (let i = 0; i < heroes.length; i++) {
      const hero = heroes[i];
      const heroItemWrapper = heroList.createDiv();
      heroItemWrapper.addClass("hero-item-wrapper");
      const heroItem = heroItemWrapper.createEl("button");
      heroItem.addClass("hero-item");
      heroManager.getHeroDataSheet(hero.id).then((value) => {
        if (!value)
          return;
        heroItem.style.backgroundImage = `url(${value.avatar})`;
      });
      const nameWrapper = heroItemWrapper.createDiv();
      nameWrapper.addClass("name-wrapper");
      nameWrapper.createDiv({ text: hero.name }).addClass("name");
      heroItem.onclick = () => {
        this.plugin.viewOpener.openHeroOverview(hero.id);
      };
    }
  }
  async onClose() {
  }
};

// src/data/HeroManager.ts
var import_obsidian3 = require("obsidian");

// src/data/DataSheet.ts
var ATTR_MU = "ATTR_1";
var ATTR_KL = "ATTR_2";
var ATTR_IN = "ATTR_3";
var ATTR_CH = "ATTR_4";
var ATTR_FF = "ATTR_5";
var ATTR_GE = "ATTR_6";
var ATTR_KO = "ATTR_7";
var ATTR_KK = "ATTR_8";
var ADV_MAGIC = "ADV_50";
var ADV_CONSECRATED = "ADV_12";
var RACE_HUMAN = "R_1";
var RACE_ELF = "R_2";
var RACE_HALFELF = "R_3";
var RACE_DWARF = "R_4";
var Races = [
  {
    id: RACE_HUMAN,
    name: "Mensch",
    lp: 5
  },
  {
    id: RACE_ELF,
    name: "Elf",
    lp: 2
  },
  {
    id: RACE_HALFELF,
    name: "Halfelf",
    lp: 5
  },
  {
    id: RACE_DWARF,
    name: "Zwerg",
    lp: 8
  }
];
var DataSheet = class {
  constructor() {
    this.name = "Unknown Hero";
    this.avatar = "";
    this.ap = {
      total: 0
    };
    this.r = "";
    this.pers = {
      family: "",
      placeofbirth: "",
      dateofbirth: "",
      age: 0,
      size: "",
      weight: "",
      title: ""
    };
    this.attr = {
      values: [],
      attributeAdjustmentSelected: "",
      ae: 0,
      kp: 0,
      lp: 0,
      permanentAE: {
        lost: 0,
        redeemed: 0
      },
      permanentKP: {
        lost: 0,
        redeemed: 0
      },
      permanentLP: {
        lost: 0
      }
    };
    this.sex = "";
    this.activatable = {};
  }
  getRace() {
    return Races.find((race) => race.id === this.r);
  }
  getMaxHealth() {
    var _a;
    const ko = this.getAttributeById(ATTR_KO);
    let baseValue = (((_a = this.getRace()) == null ? void 0 : _a.lp) || 0) + ko + ko;
    baseValue += this.attr.lp;
    baseValue -= this.attr.permanentLP.lost;
    return baseValue;
  }
  getMaxAstralEnergy() {
    if (!this.hasActivatable(ADV_MAGIC)) {
      return 0;
    }
    let baseValue = this.getAttributeById(this.attr.attributeAdjustmentSelected) + 20;
    baseValue -= this.attr.ae;
    baseValue -= this.attr.permanentAE.lost + this.attr.permanentAE.redeemed;
    return baseValue;
  }
  getMaxKarmaEnergy() {
    if (!this.hasActivatable(ADV_CONSECRATED)) {
      return 0;
    }
    let baseValue = this.getAttributeById(this.attr.attributeAdjustmentSelected) + 20;
    baseValue -= this.attr.kp;
    baseValue -= this.attr.permanentKP.lost + this.attr.permanentKP.redeemed;
    return baseValue;
  }
  getAttributeById(id) {
    const attribute = this.attr.values.find((attr) => attr.id === id);
    if (attribute) {
      return attribute.value;
    } else {
      return 8;
    }
  }
  hasActivatable(id) {
    return this.activatable.hasOwnProperty(id);
  }
  // Static method to create a new DataSheet instance from JSON
  static fromJson(jsonData) {
    const dataSheet = new DataSheet();
    Object.assign(dataSheet, jsonData);
    return dataSheet;
  }
};

// src/data/HeroManager.ts
var HeroManager = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async reloadData() {
    await this.plugin.loadSettings();
  }
  validateHeroData() {
    this.plugin.settings.heroesList.forEach(async (value) => {
      const folderName = value.id;
      const folderPath = this.plugin.settings.heroPath + "/" + folderName;
      if (!this.plugin.app.vault.getFolderByPath(folderPath)) {
        await this.plugin.app.vault.createFolder(folderPath);
      }
    });
  }
  getHeroData(heroId) {
    return this.plugin.settings.heroesList.find((hero) => hero.id === heroId);
  }
  getHeroDataSheet(heroId) {
    return new Promise(async (resolve) => {
      const folderPath = this.plugin.settings.heroPath + "/" + heroId;
      const fileName = "data.json";
      const filePath = folderPath + "/" + fileName;
      const file = this.plugin.app.vault.getAbstractFileByPath(filePath);
      if (!file) {
        console.error(`File not found: ${filePath}`);
        resolve(void 0);
        return;
      }
      const dataSheet = await this.readJsonFile(file);
      resolve(dataSheet);
    });
  }
  getHeroes() {
    return this.plugin.settings.heroesList;
  }
  createHero(heroData) {
    this.plugin.settings.heroesList.push(heroData);
    this.plugin.saveSettings();
    this.validateHeroData();
  }
  deleteHero(id) {
    const index = this.plugin.settings.heroesList.findIndex((hero) => hero.id === id);
    if (index > -1) {
      this.plugin.settings.heroesList.splice(index, 1);
      this.plugin.saveSettings();
    }
  }
  async deleteHeroFolder(heroId) {
    const folderPath = this.plugin.settings.heroPath + "/" + heroId;
    const folder = this.plugin.app.vault.getAbstractFileByPath(folderPath);
    if (folder) {
      await this.plugin.app.vault.adapter.rmdir(folderPath, true);
    }
  }
  async pushNewDataSheet(heroId, jsonData) {
    await this.saveNewDataSheet(heroId, jsonData);
    this.extractPortraitAsFile(heroId).then();
  }
  async extractPortraitAsFile(heroId) {
    const heroDataSheet = await this.getHeroDataSheet(heroId);
    const avatar = heroDataSheet == null ? void 0 : heroDataSheet.avatar;
    if (!avatar)
      return;
    const folderPath = `${this.plugin.settings.heroPath}/${heroId}`;
    const filename = `portrait.png`;
    try {
      await this.saveBase64Image(avatar, `${folderPath}/${filename}`);
    } catch (error) {
      console.error("Failed to save avatar image:", error);
      new import_obsidian3.Notice(`Failed to save avatar for heroId: ${heroId}`);
    }
  }
  async saveBase64Image(base64Data, filePath) {
    const base64Image = base64Data.replace(/^data:image\/png;base64,/, "");
    const binaryString = atob(base64Image);
    const len = binaryString.length;
    const bytes = new Uint8Array(len);
    for (let i = 0; i < len; i++) {
      bytes[i] = binaryString.charCodeAt(i);
    }
    const arrayBuffer = bytes.buffer;
    await this.plugin.app.vault.createBinary(filePath, arrayBuffer);
  }
  async saveNewDataSheet(heroId, jsonData) {
    const folderPath = `${this.plugin.settings.heroPath}/${heroId}`;
    const fileName = "data.json";
    const filePath = `${folderPath}/${fileName}`;
    const folder = this.plugin.app.vault.getAbstractFileByPath(folderPath);
    if (folder) {
      await this.saveJsonToFile(filePath, jsonData);
    } else {
      try {
        await this.plugin.app.vault.createFolder(folderPath);
        await this.saveJsonToFile(filePath, jsonData);
      } catch (error) {
        console.error(`Failed to create folder: ${error}`);
        new import_obsidian3.Notice(`Error creating folder: ${error.message}`);
      }
    }
  }
  async readJsonFile(file) {
    try {
      const fileContent = await this.plugin.app.vault.read(file);
      const jsonData = JSON.parse(fileContent);
      return DataSheet.fromJson(jsonData);
    } catch (error) {
      console.error(`Error reading JSON file: ${error}`);
      return void 0;
    }
  }
  async saveJsonToFile(filePath, jsonData) {
    try {
      const blob = new Blob([jsonData], { type: "application/json" });
      await this.plugin.app.vault.adapter.writeBinary(filePath, await this.blobToArrayBuffer(blob));
    } catch (error) {
      console.error(`Error saving file: ${error}`);
      new import_obsidian3.Notice(`Error saving file: ${error.message}`);
    }
  }
  async blobToArrayBuffer(blob) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => resolve(reader.result);
      reader.onerror = reject;
      reader.readAsArrayBuffer(blob);
    });
  }
};

// src/view/ViewOpener.ts
var import_obsidian5 = require("obsidian");

// src/modal/ConfirmWarningModal.ts
var import_obsidian4 = require("obsidian");
var defaultStyle = {
  title: "Best\xE4tigen?",
  description: "",
  confirmButtonText: "Best\xE4tigen",
  cancelButtonText: "Abbrechen"
};
var ConfirmWarningModal = class extends import_obsidian4.Modal {
  constructor(plugin, style = defaultStyle, onSubmit) {
    super(plugin.app);
    this.setTitle(style.title);
    this.contentEl.createEl("p", { text: style.description });
    new import_obsidian4.Setting(this.contentEl).addButton((btn) => btn.setButtonText(style.cancelButtonText).setCta().onClick(() => {
      this.close();
    })).addButton((btn) => btn.setButtonText(style.confirmButtonText).setCta().setWarning().onClick(() => {
      this.close();
      onSubmit();
    }));
  }
};

// src/view/HeroOverview.ts
var VIEW_HERO_OVERVIEW = "hero-overview";
var HeroOverview = class extends DSAView {
  constructor(leaf, plugin) {
    super(leaf, plugin);
    this.id = "";
  }
  getHeroData() {
    return this.plugin.heroManager.getHeroData(this.id);
  }
  async getDataSheet() {
    const dataSheet = await this.plugin.heroManager.getHeroDataSheet(this.id);
    if (!dataSheet) {
      return new DataSheet();
    }
    return dataSheet;
  }
  getDisplayText() {
    var _a;
    return `${super.getDisplayText()} ${((_a = this.getHeroData()) == null ? void 0 : _a.name) || "Unknown Hero"}`;
  }
  getViewType() {
    return VIEW_HERO_OVERVIEW;
  }
  async onOpen() {
    var _a;
    const heroId = (_a = this.getState()) == null ? void 0 : _a.id;
    if (heroId) {
      this.id = heroId;
    } else {
      return;
    }
    await super.onOpen();
    const overview = this.createContentElement("dsa-hero-overview");
    const dataSheet = await this.getDataSheet();
    const heroPage = overview.createDiv({ cls: "hero-page" });
    const attributesCard = heroPage.createDiv({ cls: "hero-card" });
    attributesCard.createEl("h1", { cls: "name", text: `${dataSheet.name || "Unknown Hero"} ${dataSheet.pers.title ? `"${dataSheet.pers.title}"` : ""} ${dataSheet.pers.family || ""} (${dataSheet.ap.total} AP)` });
    const attributes = attributesCard.createDiv({ cls: "attributes" });
    this.createLabel(attributes, "MU").createDiv({ cls: "attribute mu", text: `${dataSheet == null ? void 0 : dataSheet.getAttributeById(ATTR_MU)}` });
    this.createLabel(attributes, "KL").createDiv({ cls: "attribute kl", text: `${dataSheet == null ? void 0 : dataSheet.getAttributeById(ATTR_KL)}` });
    this.createLabel(attributes, "IN").createDiv({ cls: "attribute in", text: `${dataSheet == null ? void 0 : dataSheet.getAttributeById(ATTR_IN)}` });
    this.createLabel(attributes, "CH").createDiv({ cls: "attribute ch", text: `${dataSheet == null ? void 0 : dataSheet.getAttributeById(ATTR_CH)}` });
    this.createLabel(attributes, "FF").createDiv({ cls: "attribute ff", text: `${dataSheet == null ? void 0 : dataSheet.getAttributeById(ATTR_FF)}` });
    this.createLabel(attributes, "GE").createDiv({ cls: "attribute ge", text: `${dataSheet == null ? void 0 : dataSheet.getAttributeById(ATTR_GE)}` });
    this.createLabel(attributes, "KO").createDiv({ cls: "attribute ko", text: `${dataSheet == null ? void 0 : dataSheet.getAttributeById(ATTR_KO)}` });
    this.createLabel(attributes, "KK").createDiv({ cls: "attribute kk", text: `${dataSheet == null ? void 0 : dataSheet.getAttributeById(ATTR_KK)}` });
    const portraitCard = heroPage.createDiv({ cls: "hero-card portrait-card" });
    const heroPortrait = portraitCard.createDiv({ cls: "hero-portrait" });
    heroPortrait.style.backgroundImage = `url(${dataSheet == null ? void 0 : dataSheet.avatar})`;
    const bars = portraitCard.createDiv({ cls: "progress-bars" });
    this.createLabel(bars, "Lebensenergie").appendChild(this.createProgressbar(dataSheet.getMaxHealth(), dataSheet.getMaxHealth(), ["bg-health"]));
    const maxAstralEnergy = dataSheet.getMaxAstralEnergy();
    if (maxAstralEnergy > 0) {
      this.createLabel(bars, "Astralenergie").appendChild(this.createProgressbar(maxAstralEnergy, maxAstralEnergy, ["bg-astral"]));
    }
    const maxKarmaEnergy = dataSheet.getMaxKarmaEnergy();
    if (maxKarmaEnergy > 0) {
      this.createLabel(bars, "Karmaenergie").appendChild(this.createProgressbar(maxKarmaEnergy, maxKarmaEnergy, ["bg-karma"]));
    }
    const manageButtons = overview.createDiv({ cls: "manage-buttons" });
    const deleteButton = manageButtons.createEl("button", { text: "L\xF6schen", cls: "button delete" });
    deleteButton.onclick = () => {
      const modalStyle = {
        title: "Held l\xF6schen?",
        description: "Soll der ausgew\xE4hlte Hero wirklich gel\xF6scht werden?",
        confirmButtonText: "L\xF6schen",
        cancelButtonText: "Abbrechen"
      };
      new ConfirmWarningModal(this.plugin, modalStyle, () => {
        this.plugin.heroManager.deleteHero(this.id);
        this.leaf.detach();
        this.plugin.viewOpener.openHeroListView();
      }).open();
    };
  }
  createLabel(parent, labelText) {
    const wrapper = parent.createDiv({ cls: "labeled-element" });
    wrapper.createDiv({ cls: "labeled-text", text: labelText });
    return wrapper;
  }
  createProgressbar(max, value, classes) {
    const progress = createDiv({ cls: "progress" });
    const progressBar = progress.createDiv({ cls: "progress-bar" });
    if (max > 0) {
      progressBar.style.width = `${value / max * 100}%`;
    } else {
      progressBar.style.width = "0%";
    }
    progressBar.addClasses(classes);
    progress.createDiv({ cls: "progress-value-label", text: `${value} / ${max}` });
    return progress;
  }
  getState() {
    return {
      id: this.id
    };
  }
  async setState(state, result) {
    if (state && typeof state === "object") {
      if ("id" in state && state.id && typeof state.id === "string") {
        this.id = state.id;
        this.onOpen();
      }
    }
    super.setState(state, result);
  }
  async onClose() {
  }
  getTitle() {
    return `Helden\xFCbersicht`;
  }
};

// src/view/TokenizerView.ts
var VIEW_TOKENIZER = "tokenizer";
var TokenizerView = class extends DSAView {
  constructor(leaf, plugin) {
    super(leaf, plugin);
  }
  getTitle() {
    return "Tokenizer";
  }
  getViewType() {
    return VIEW_TOKENIZER;
  }
  getDisplayText() {
    return `${super.getDisplayText()}Tokenizer`;
  }
  async onOpen() {
    await super.onOpen();
    const container = this.containerEl;
    const iframe = container.createEl("iframe", {
      attr: {
        src: "https://rolladvantage.com/tokenstamp/",
        style: "width: 100%; height: 100%; border: none;"
        // Ensure it fills the container
      }
    });
    re;
  }
};

// src/view/ViewOpener.ts
var ViewOpener = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  openTokenizerView() {
    this.openOrRevealView(VIEW_TOKENIZER);
  }
  openHeroListView() {
    this.openOrRevealView(VIEW_HERO_LIST);
  }
  openHeroOverview(id) {
    this.openView(VIEW_HERO_OVERVIEW, true, { id });
  }
  async openOrRevealView(type) {
    const { workspace } = this.plugin.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(type);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getLeaf(true);
      await leaf.setViewState({ type, active: true });
    }
    if (leaf instanceof import_obsidian5.WorkspaceLeaf) {
      workspace.revealLeaf(leaf).then((r) => {
      });
    }
  }
  async openView(type, openInNewTab, state) {
    const { workspace } = this.plugin.app;
    const leaf = workspace.getLeaf(openInNewTab);
    await leaf.setViewState({
      type,
      // @ts-ignore
      state
    });
    workspace.setActiveLeaf(leaf);
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  heroPath: "",
  optolithPath: "",
  heroesList: []
};
var DSAPlugin = class extends import_obsidian6.Plugin {
  injectSVGFilter() {
    const svgFilter = `
            <svg style="display:none;">
                <filter id="wavy2">
                    <feTurbulence x="0" y="0" baseFrequency="0.02" numOctaves="5" seed="1" />
                    <feDisplacementMap in="SourceGraphic" scale="20" />
                </filter>
            </svg>
        `;
    document.body.insertAdjacentHTML("afterbegin", svgFilter);
  }
  async onload() {
    await this.loadSettings();
    this.heroManager = new HeroManager(this);
    this.viewOpener = new ViewOpener(this);
    this.injectSVGFilter();
    const dsaRibbon = this.addRibbonIcon("dice", "Heldenliste", (evt) => {
      this.viewOpener.openHeroListView();
    });
    this.addCommand({
      id: "open-characters-view",
      name: "Heldenliste \xF6ffnen",
      callback: () => {
        this.viewOpener.openHeroListView();
      }
    });
    this.addSettingTab(new DSASettingsTab(this.app, this));
    this.registerView(
      VIEW_HERO_LIST,
      (leaf) => {
        return new HeroListView(leaf, this);
      }
    );
    this.registerView(
      VIEW_HERO_OVERVIEW,
      (leaf) => {
        return new HeroOverview(leaf, this);
      }
    );
    this.registerView(
      VIEW_TOKENIZER,
      (leaf) => {
        return new TokenizerView(leaf, this);
      }
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var DSASettingsTab = class extends import_obsidian6.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian6.Setting(containerEl).setName("Hero Location").setDesc("Where do you want to have your character files saved?").addText((text) => text.setPlaceholder("/path/to/characters").setValue(this.plugin.settings.heroPath).onChange(async (value) => {
      this.plugin.settings.heroPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian6.Setting(containerEl).setName("Optolith install location").setDesc("Where is Optolith installed?").addText((text) => text.setPlaceholder("/path/to/optolith").setValue(this.plugin.settings.optolithPath).onChange(async (value) => {
      this.plugin.settings.optolithPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
